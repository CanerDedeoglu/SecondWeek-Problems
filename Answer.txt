- val ile var arasındaki fark nedir?

Val ve var anahtar kelimeleri değişken tanımlarken kullanılır. Val değişkenler değerleri bir kere atandıktan sonra değiştirilemez değişkenlerdir. "Value" kelimesinin kısaltmasıdır.Var ise değişebilen değerlere sahip değişkenler için kullanılır. "Variable" dan gelir. Val değişkenler read only değişkenlerdir.

- Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

Bir val değişkenin val gibi davranmasını istiyorsak private setter yöntemi ile bir daha set edilmesini engellediğimizden dolayı val değişken gibi davranır. Bir var değişkenin classlarda bazı yerlerinde val gibi davranmasını istediğimiz durumlarda kullanırız. 

Bir oyun karakteri sınıfı oluşturup, karakterin enerjisinin (energy) sadece belirli bir yöntemle değiştirilebilmesini sağlayalım. Bu yöntemle enerji artırılabilir veya azaltılabilir, ancak dışarıdan doğrudan enerji değeri değiştirilemez.

- "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

İmmutable kavramı, bir nesne oluşturulduktan sonra hiç bir şekilde değiştirilmemesine denir. Read only ise dışarıdan sadece okunabilen nesneler veya değişkenler için kullanılır. 

Val değişkenler genelde immutable diye duyarız fakat val değişkenleri bir class yapısının içinde getter methodunun return'ünün sabit bir değere eşit olmaması durumunda değerin değişebilir olmasına sebep olur. Bu durumdan dolayı val değişkenler local bir fonksiyonun içinde immutable diyebiliriz fakat bir class yapısında read only'dir.

- "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Kotlin' de bir nesne oluştururken iki farklı tarzda oluşturabiliriz. İlk'i değişkenin tipini belirterek değişken oluşturmak. İkincisinde ise sadece eşitliğin sağ tarafına değişkenin value değerini vererek. Burada ide bizim belirtmediğimiz değişkenin tipini kendisi otomatik olarak algılayıp değişken tipini veriyor. Bu olaya type inference denir. Numeric tipli değişkenlerde tip çıkarımı sırasında değer aralığı int ise burada değer byte,short olmasına bakılmaksızın ide int olarak set edilir. Eğer int değer aralığından büyük ise Long olarak set edilir.

Bir nesneye nullable özelliği vermek istiyorsak burada kesinlikle tip belirtmek gereklidir.Yoksa tip çıkarımı oluyor diye belirtmeden sadece value değeri verirsek değişken tipini ide Nothing olarak belirler. 

- Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Diğer dillerde primitive olarak bildiğimiz değişkenler Kotlin'de sınıf tiplidir fakat bu referans tip görünümlü primitive tipli değişkenler çalışma zamanında byte koda dönüşüm sırasında özel optimizasyonlar ile primitive olarak ele alınmaktadır. Bundan dolayı Kotlin de primitive tip olmadığı anlamına gelmez.

- "Tip Güvenliği" (Type Safety) kavramını açıklayın.

Tip güvenliği, programlama dillerinde türlerle ilgili hataları erken aşamada tespit eden ve bu hataları önleyen bir mekanizmadır.


