- val ile var arasındaki fark nedir?

Val ve var anahtar kelimeleri değişken tanımlarken kullanılır. Val değişkenler değerleri bir kere atandıktan sonra değiştirilemez değişkenlerdir. "Value" kelimesinin kısaltmasıdır.Var ise değişebilen değerlere sahip değişkenler için kullanılır. "Variable" dan gelir. Val değişkenler read only değişkenlerdir.

- Bir var değişkeni val gibi davranmasını nasıl sağlayabiliriz val kelimesini kullanmadan? Bunu neden yapmak isteriz? Örnek bir senaryo verin.

Bir val değişkenin val gibi davranmasını istiyorsak private setter yöntemi ile bir daha set edilmesini engellediğimizden dolayı val değişken gibi davranır. Bir var değişkenin classlarda bazı yerlerinde val gibi davranmasını istediğimiz durumlarda kullanırız. 

Bir oyun karakteri sınıfı oluşturup, karakterin enerjisinin (energy) sadece belirli bir yöntemle değiştirilebilmesini sağlayalım. Bu yöntemle enerji artırılabilir veya azaltılabilir, ancak dışarıdan doğrudan enerji değeri değiştirilemez.

- "Değişmez" (Immutable) ve "Salt Okunur" (ReadOnly) kavramlarını açıklayın. val değişkenler neden aslında "değişmez" değil de "salt okunur" olarak açıklanmalıdır?

İmmutable kavramı, bir nesne oluşturulduktan sonra hiç bir şekilde değiştirilmemesine denir. Read only ise dışarıdan sadece okunabilen nesneler veya değişkenler için kullanılır. 

Val değişkenler genelde immutable diye duyarız fakat val değişkenleri bir class yapısının içinde getter methodunun return'ünün sabit bir değere eşit olmaması durumunda değerin değişebilir olmasına sebep olur. Bu durumdan dolayı val değişkenler local bir fonksiyonun içinde immutable diyebiliriz fakat bir class yapısında read only'dir.

- "Tip Çıkarımı" (Type inference) kavramını açıklayın. Hangi durumlarda tip belirtmek kesin olarak gereklidir?

Kotlin' de bir nesne oluştururken iki farklı tarzda oluşturabiliriz. İlk'i değişkenin tipini belirterek değişken oluşturmak. İkincisinde ise sadece eşitliğin sağ tarafına değişkenin value değerini vererek. Burada ide bizim belirtmediğimiz değişkenin tipini kendisi otomatik olarak algılayıp değişken tipini veriyor. Bu olaya type inference denir. Numeric tipli değişkenlerde tip çıkarımı sırasında değer aralığı int ise burada değer byte,short olmasına bakılmaksızın ide int olarak set edilir. Eğer int değer aralığından büyük ise Long olarak set edilir.

Bir nesneye nullable özelliği vermek istiyorsak burada kesinlikle tip belirtmek gereklidir.Yoksa tip çıkarımı oluyor diye belirtmeden sadece value değeri verirsek değişken tipini ide Nothing olarak belirler. 

- Kotlin'de tüm değişkenlerin sınıf olarak bulunması, "ilkel tip" (primitive type) olmadıkları anlamına gelir mi? Arka planda neler oluyor?

Diğer dillerde primitive olarak bildiğimiz değişkenler Kotlin'de sınıf tiplidir fakat bu referans tip görünümlü primitive tipli değişkenler çalışma zamanında byte koda dönüşüm sırasında özel optimizasyonlar ile primitive olarak ele alınmaktadır. Bundan dolayı Kotlin de primitive tip olmadığı anlamına gelmez.

- "Tip Güvenliği" (Type Safety) kavramını açıklayın.

Tip güvenliği, programlama dillerinde türlerle ilgili hataları erken aşamada tespit eden ve bu hataları önleyen bir mekanizmadır.

-Bir değişkeni nullable yapmak için ne yapmalıyız?

Kotlinde bir nesneyi nullable yapabilmek için nesnenin tipini belirtirken sonuna soru işareti konulmalıdır. String? gibi.

-"Null Güvenliği" (Null Safety) kavramını açıklayın.

Null güvenliği, null referanslardan kaynaklanan hataları önlemek için kullanılan bir mekanizmadır.Bu sayede null exception pointer hatası yok denilecek kadar azdır. 

- Bir değişkene null değer atanır ve tip belirtilmezse Kotlin bu değişkeni nasıl yorumlar?

Kotlin de değişken tipi belirtmeden null değer atanırsa bu değişkeni ide Nothing olarak tanımlar. 

- İlkel bir değişkenin nullable olması ile null değer alamaması arasında bellek yönetimi açısından nasıl farklar vardır?

İlkel bir değişkene nullable özellik verirsek bu değişken primitive olmaktan çıkar ve referans tipli bir eğişken olur. Belleğe erişim daha yavaş olur ve bellekte kapladığı alan daha fazla olur. 

- Nullable bir değişkenin bir değere sahip olması ile null olması arasında bellek yönetimi açısından nasıl bir fark vardır? Null değer almış bir değişken bellekte yer kaplamaz diyebilir miyiz?

Bir nullable değişken null olduğunda, bu değişkenin bellekte işaret ettiği herhangi bir nesne yoktur.
Değişkenin kendisi bellekte bir referans olarak yer alır, ancak bu referansın işaret ettiği nesne bulunmaz.
Null referansın kendisi çok az yer kaplar (genellikle sadece bir pointer boyutunda), ancak bu durum, değişkenin bellekten tamamen kaldırıldığı anlamına gelmez. Sadece işaret ettiği nesne yoktur.

-Nullable bir değişkenle çalışırken hangi operatörleri kullanırız? Bu operatörlerin kullanım farkları nelerdir? Hangisini ne zaman kullanmak daha anlamlıdır?

Nullable değişkenle çalışırken !! ya da ? operatörlerini kullanırız ve null kontrolü yaparız. !! kullandığımız zaman ide ye null gelmeyeceğinin sözünü vermiş gibi oluyoruz. ? kullandığımız zaman null değil ise bu işlemi gerçekleştir demiş oluyoruz. İf kontrolüne benzetebiliriz. Değişkenin null geldiği durumda uygulamada ciddi bir eksiklik oluştuğu zaman !! kullanmak daha mantıklıdır ve uygulamayı crash etmiş oluruz fakat null geldiğinde pek bir önemi olmayan bir işlem ise ? kullanmak daha mantıklıdır ve uygulama çalışmaya devam eder. 


Sayılar

-Kaç farklı tipte "number" sınıfı miras alan "alt sınıf" (child class) vardır? Bunların değer aralıkları neden önemlidir?

Number sınıfından sınıfından miras alan 6 tane alt sınıf vardır ;
- Byte
- Short
- Int
- Long
- Float
- Double 

Uygulama geliştirme sırasında doğru veri türünü seçmek, hem performansı optimize eder hem de bellek kullanımını en verimli hale getirir.

- Eğer bir değişkene tip belirtimi yapılmaz ve bir değer atanırsa, Kotlin tip çıkarımını nasıl yapar?

Kotlin, atanan değerin türüne bakarak değişkenin türünü belirler.
